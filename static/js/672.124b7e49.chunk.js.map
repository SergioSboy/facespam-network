{"version":3,"file":"static/js/672.124b7e49.chunk.js","mappings":"2JACA,QAA0B,yBAA1B,EAAmE,+BAAnE,EAAgH,6BAAhH,EAAsJ,wBAAtJ,EAAyL,0BAAzL,EAA6N,yBAA7N,EAAiQ,0BAAjQ,EAAkS,sB,qDCGlS,MAYA,EAZoBA,IAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACIC,EAAAA,EAAAA,KAAA,OAAAC,UACID,EAAAA,EAAAA,KAAA,OAAKE,UAAWC,EAAeF,UAC3BD,EAAAA,EAAAA,KAACI,EAAAA,GAAO,CAACC,GAAIP,EAAKG,SAAEJ,EAAMS,UAE5B,ECDd,EANiBT,IAETG,EAAAA,EAAAA,KAAA,OAAKE,UAAWC,EAAgBF,SAAEJ,EAAMU,M,2CCIhD,MAmDMC,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,wBAAjBD,EAhBJZ,IAEhBc,EAAAA,EAAAA,MAAA,QAAMT,UAAWC,EAAcS,SAAUf,EAAMgB,aAAaZ,SAAA,EACxDD,EAAAA,EAAAA,KAAA,OAAKE,UAAWC,EAAiBF,UAC7BD,EAAAA,EAAAA,KAACc,EAAAA,EAAK,CAACC,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,GAAUC,EAAAA,EAAAA,GAAiB,KACtCb,KAAK,iBAAiBc,YAAY,gBAE7CpB,EAAAA,EAAAA,KAAA,OAAAC,UAEID,EAAAA,EAAAA,KAACqB,EAAAA,EAAQ,CAACf,KAAM,gBAOhC,EApDiBT,IAKb,IAAIyB,EAAkBzB,EAAM0B,YAAYC,YAAYC,KAAIC,IAAM1B,EAAAA,EAAAA,KAAC2B,EAAU,CAAarB,KAAMoB,EAAGpB,KAAMP,GAAI2B,EAAG3B,IAA7B2B,EAAG3B,MAC9E6B,EAAmB/B,EAAM0B,YAAYM,aAAaJ,KAAIC,IAAM1B,EAAAA,EAAAA,KAAC8B,EAAO,CAAavB,IAAKmB,EAAGK,SAAfL,EAAG3B,MAG7EiC,GAAWC,EAAAA,EAAAA,MAQf,OAPAC,EAAAA,EAAAA,YAAU,KACN,IAAqB,IAAjBrC,EAAMsC,OACN,OAAOH,EAAS,WACpB,GACD,CAACnC,EAAMsC,UAINxB,EAAAA,EAAAA,MAAA,OAAKT,UAAWC,EAAgBF,SAAA,EAC5BD,EAAAA,EAAAA,KAAA,OAAKE,UAAWC,EAAsBF,UAClCD,EAAAA,EAAAA,KAAA,OAAAC,SACKqB,OAGTtB,EAAAA,EAAAA,KAAA,OAAKE,UAAWC,KAChBH,EAAAA,EAAAA,KAAA,OAAKE,UAAWC,EAAiBF,UAC7BD,EAAAA,EAAAA,KAAA,OAAAC,SACK2B,OAGT5B,EAAAA,EAAAA,KAACQ,EAAmB,CAACI,SA7BXwB,IACdvC,EAAMwC,YAAYD,EAASE,eAAe,MA6BpC,ECpBd,SADuBC,E,QAAAA,KAfAC,IACZ,CACHjB,YAAaiB,EAAMjB,YACnBY,OAAQK,EAAMC,KAAKN,WAGDO,IACf,CAEHL,YAAcC,IACVI,GAASC,EAAAA,EAAAA,GAAmBL,GAAgB,KAKjCC,CAA6CK,E","sources":["webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Qliol\",\"dialogs_items\":\"Dialogs_dialogs_items__uSO8M\",\"create_line\":\"Dialogs_create_line__YgjVA\",\"dialog\":\"Dialogs_dialog__ay3L1\",\"messages\":\"Dialogs_messages__7I7G4\",\"message\":\"Dialogs_message__L3nzA\",\"my_input\":\"Dialogs_my_input__KYhMc\",\"play\":\"Dialogs_play__xseNE\"};","import React from \"react\";\r\nimport classes from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div>\r\n            <div className={classes.dialog}>\r\n                <NavLink to={path}>{props.name}</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem","import React from \"react\";\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={classes.message}>{props.mes}</div>\r\n    )\r\n}\r\n\r\nexport default Message","import classes from './Dialogs.module.css'\r\nimport {useNavigate} from 'react-router-dom'\r\nimport React, {useEffect} from 'react';\r\nimport MyButton from \"../MyButton/MyButton\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nconst Dialogs = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.sendMessage(formData.newMessageBody)\r\n    }\r\n\r\n    let dialogsElements = props.dialogsPage.dialogsData.map(el => <DialogItem key={el.id} name={el.name} id={el.id}/>);\r\n    let messagesElements = props.dialogsPage.messagesData.map(el => <Message key={el.id} mes={el.message}/>);\r\n\r\n\r\n    let navigate = useNavigate()\r\n    useEffect(() => {\r\n        if (props.isAuth === false) {\r\n            return navigate(\"../login\")\r\n        }\r\n    }, [props.isAuth])\r\n\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogs_items}>\r\n                <div>\r\n                    {dialogsElements}\r\n                </div>\r\n            </div>\r\n            <div className={classes.create_line}></div>\r\n            <div className={classes.messages}>\r\n                <div>\r\n                    {messagesElements}\r\n                </div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form className={classes.play} onSubmit={props.handleSubmit}>\r\n            <div className={classes.my_input}>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLengthCreator(50)]}\r\n                       name='newMessageBody' placeholder='Write...'/>\r\n            </div>\r\n            <div>\r\n\r\n                <MyButton name={'Send'}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);\r\nexport default Dialogs","import {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n\r\n        }\r\n    }\r\n}\r\nlet DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\nexport default DialogsContainer"],"names":["props","path","id","_jsx","children","className","classes","NavLink","to","name","mes","AddMessageFormRedux","reduxForm","form","_jsxs","onSubmit","handleSubmit","Field","component","Textarea","validate","required","maxLengthCreator","placeholder","MyButton","dialogsElements","dialogsPage","dialogsData","map","el","DialogItem","messagesElements","messagesData","Message","message","navigate","useNavigate","useEffect","isAuth","formData","sendMessage","newMessageBody","connect","state","auth","dispatch","sendMessageCreator","Dialogs"],"sourceRoot":""}